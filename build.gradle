plugins {
    id "dev.architectury.loom" version "1.3-SNAPSHOT"
    id "maven-publish"
    id "io.github.juuxel.loom-vineflower" version "1.11.0" apply false
}

base {
    archivesName = project.archives_base_name
}

version = project.mod_version
group = project.maven_group

loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()

    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
        mixinConfigs = [
            "probejs.mixins.json"
        ]

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)
    }
}

repositories {
    mavenCentral()
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        url "https://maven.architectury.dev/"
        content {
            includeGroup("me.shedaniel")
        }
    }

    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.ftb.mods"
        }
    }

    maven {
		url = "https://maven.parchmentmc.net/"
		content {
			includeGroup "org.parchmentmc.data"
		}
	}
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // choose what mappings you want to use here
    // leave this uncommented if you want to use
    // mojang's official mappings, or feel free
    // to add your own mappings here (how about
    // mojmap layered with parchment, for example?)
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}")
	}

    // uncomment this if you want to use yarn mappings
    // mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // your forge dependency, this is **required** when using Forge Loom in forge mode!
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // additional dependencies can be specified using loom's regular format
    // specifying a "mod" dependency (like modImplementation or modApi)
    // will cause loom to remap the file to your specified mappings

    // in this example, we'll be adding JEI as a dependency
    // according to their developer example on GitHub
    // see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
    // compile against the JEI API but do not include it at runtime
    // don't worry about loom "not finding a forge mod" here,
    // JEI's api just doesn't have any class with an @Mod annotation
    // modCompileOnly "mezz.jei:jei-1.16.5:${jei_version}:api"
    // at runtime, use the full JEI jar
    // modRuntimeOnly "mezz.jei:jei-1.16.5:${jei_version}"
    modApi "dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}"
    //lombok
    compileOnly "org.projectlombok:lombok:${rootProject.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${rootProject.lombok_version}"
    testCompileOnly "org.projectlombok:lombok:${rootProject.lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${rootProject.lombok_version}"
    // https://mvnrepository.com/artifact/com.pkware.jabel/jabel-javac-plugin
    annotationProcessor 'com.pkware.jabel:jabel-javac-plugin:1.0.1-1'
    compileOnly 'com.pkware.jabel:jabel-javac-plugin:1.0.1-1'
    //
    compileOnly 'org.java-websocket:Java-WebSocket:1.5.6'
    include 'org.java-websocket:Java-WebSocket:1.5.6'
    //
    compileOnly 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
    compileOnly 'com.github.javaparser:javaparser-core:3.25.8'
    compileOnly "org.vineflower:vineflower:1.11.0"
    include 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
    include 'com.github.javaparser:javaparser-core:3.25.8'
    include "org.vineflower:vineflower:1.11.0"
}

processResources {
    // define properties that can be used during resource processing
    inputs.property "version", project.version

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    sourceCompatibility = 16

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    options.release = 8
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
